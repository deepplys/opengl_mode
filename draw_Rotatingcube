#include<gl/glut.h>
#include<stdio.h>
#include<iostream>
using namespace std;
typedef struct materialStruct
{
	GLfloat ambient[4];//环境反射
	GLfloat diffuse[4];//漫反射
	GLfloat specular[4];//镜面反射
	GLfloat shininess;//辉度系数
}materialStruct;
materialStruct brassMaterials =
{
	{0.33,0.22,0.03,1.0},
	{0.78,0.57,0.11,1.0},
	{0.99,0.91,0.81,1.0},
	27.8
};
materialStruct redPlasticMaterials =
{
	{0.3,0.0,0.0,1.0},
	{0.6,0.0,0.0,1.0},
	{0.8,0.6,0.6,1.0},
	32.0
};
materialStruct whiteShinyMaterials =
{
	{1.0,1.0,1.0,1.0},
    {1.0,1.0,1.0,1.0},
    {1.0,1.0,1.0,1.0},
	100.0
};
void materials(materialStruct *materials)//设置相关材质
{
	glMaterialfv(GL_FRONT_AND_BACK, GL_AMBIENT, materials->ambient);
	glMaterialfv(GL_FRONT_AND_BACK, GL_DIFFUSE, materials->diffuse);
	glMaterialfv(GL_FRONT_AND_BACK, GL_SPECULAR, materials->specular);
	glMaterialfv(GL_FRONT_AND_BACK, GL_SHININESS, &materials->shininess);
}
typedef struct lightingStruct
{
	GLfloat ambient[4];//环境光
	GLfloat diffuse[4];//漫反光
	GLfloat specular[4];//镜面光
}lightingStruct;
lightingStruct whiteLighting =
{
	{0,0,0,1},{1,1,1,1},{1,1,1,1}
};
lightingStruct colorredLighting =
{
	{0.2,0,0,1},{0,1,0,1},{0,0,1,1}
};
GLfloat light0_pos[4] = { 0.9,0.9,2.25,0 };//光源位置
materialStruct *currentMaterials;//设置全局变量来指定当前材质，便于键盘的操控
lightingStruct *currentLighting;//设置全局变量来指定当前光源，便于键盘的操控
GLfloat vertices[][3] =
{
	{-1,-1,1},{-1,1,1},{1,1,1}, {1,-1,1},{-1,-1,-1},{-1,1,-1},{1,1,-1},{1,-1,-1}
};//长方体各顶点坐标
GLfloat colors[][3] =
{
	{1,0,0},{0,1,1},{1,1,0},{0,1,0},{0,0,1},{1,0,1}
};
void polygon(int a, int b, int c, int d)//绘制一个面
{
	glBegin(GL_POLYGON);
	glVertex3fv(vertices[a]);
	glVertex3fv(vertices[b]);
	glVertex3fv(vertices[c]);
	glVertex3fv(vertices[d]);
	glEnd();
}
GLfloat normals[][3] =
{
	{0,0,-1},{0,1,0},{-1,0,0},{1,0,0},{0,0,1},{0,-1,0}
};//设置面的法向量
void colorCube()//绘制长方体并指定每个面的法向量
{
	glNormal3fv(normals[0]);
	polygon(0, 3, 2, 1);
	glNormal3fv(normals[1]);
	polygon(2, 3, 7, 6);
	glNormal3fv(normals[2]);
	polygon(0, 4, 7, 3);
	glNormal3fv(normals[3]);
	polygon(1, 2, 6, 5);
	glNormal3fv(normals[4]);
	polygon(4, 5, 6, 7);
	glNormal3fv(normals[5]);
	polygon(0, 1, 5, 4);
	glFlush();
}
void init()//初始化启用初始光源和材质
{
	glEnable(GL_LIGHTING);
	glEnable(GL_LIGHT0);
	currentMaterials = &redPlasticMaterials;
	glMaterialfv(GL_FRONT, GL_AMBIENT, currentMaterials->ambient);
	glMaterialfv(GL_FRONT, GL_DIFFUSE, currentMaterials->diffuse);
	glMaterialfv(GL_FRONT, GL_SPECULAR, currentMaterials->specular);
	glMaterialfv(GL_FRONT, GL_SHININESS, &currentMaterials->shininess);
	currentLighting = &colorredLighting;
	glLightfv(GL_LIGHT0, GL_AMBIENT, currentLighting->ambient);
	glLightfv(GL_LIGHT0, GL_DIFFUSE, currentLighting->diffuse);
	glLightfv(GL_LIGHT0, GL_SPECULAR, currentLighting->specular);
	glLightfv(GL_LIGHT0, GL_POSITION, light0_pos);
}
int axis;//判断往那个方向旋转
float theta[3];//每个方向的角度
void mouse(int btn, int state, int x, int y)
{
	if (btn == GLUT_LEFT_BUTTON && state == GLUT_DOWN)
	{
		axis = 0;
	}
	if (btn == GLUT_MIDDLE_BUTTON && state == GLUT_DOWN)
	{
		axis = 1;
	}
	if (btn == GLUT_RIGHT_BUTTON && state == GLUT_DOWN)
	{
		axis = 2;
	}
}
void spinCube()//旋转
{
	theta[axis] += 0.01;
	if (theta[axis] > 360.0)theta[axis] -= 360.0;
	glutPostRedisplay();
}
void key(unsigned char k, int x, int y)
{
	switch (k)
	{
	case '1':
		glutIdleFunc(NULL);//不旋转
		break;
	case '2':
		glutIdleFunc(spinCube);//旋转
		break;
	case '3':
		currentMaterials = &redPlasticMaterials;//设置材质
		break;
	case '4':
		currentMaterials = &brassMaterials;//设置材质
		break;
	case '5':
		currentMaterials = &whiteShinyMaterials;//设置材质
		break;
	case '6':
		currentLighting = &whiteLighting;//设置灯光
		break;
	case '7':
		currentLighting = &colorredLighting;//设置灯光
		break;
	case 'q':
		exit(0);
		break;
	default:
		break;
	}
	//改变材质属性
	glMaterialfv(GL_FRONT, GL_AMBIENT, currentMaterials->ambient);
	glMaterialfv(GL_FRONT, GL_DIFFUSE, currentMaterials->diffuse);
	glMaterialfv(GL_FRONT, GL_SPECULAR, currentMaterials->specular);
	glMaterialfv(GL_FRONT, GL_SHININESS, &currentMaterials->shininess);
	//改变灯光属性
	glLightfv(GL_LIGHT0, GL_AMBIENT, currentLighting->ambient);
	glLightfv(GL_LIGHT0, GL_DIFFUSE, currentLighting->diffuse);
	glLightfv(GL_LIGHT0, GL_SPECULAR, currentLighting->specular);
	glLightfv(GL_LIGHT0, GL_POSITION, light0_pos);
	glutPostRedisplay();
}
void display()//长方体旋转
{
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
	glLoadIdentity();
	glRotated(theta[0], 1, 0, 0);
	glRotated(theta[1], 0, 1, 0);
	glRotated(theta[2], 0, 0, 1);
	colorCube();
	glutSwapBuffers();
}
void reshape(int w, int h)//保持长方体长宽高比例不变
{
	glViewport(0, 0, (GLsizei)w, (GLsizei)h);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	if (w <= h)
	{
		glOrtho(-2.0, 2.0, -2.0 * (GLfloat)h / (GLfloat)w, 2.0 * (GLfloat)h / (GLfloat)w, -2.0, 2.0);
	}
	else
	{
		glOrtho(-2.0 * (GLfloat)w / (GLfloat)h ,2.0 * (GLfloat)w / (GLfloat)h, -2.0, 2.0,-2.0,2.0);
	}
	glMatrixMode(GL_MODELVIEW);
}
int main(int argc, char** argv)
{
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB | GLUT_DEPTH);
	glutInitWindowSize(500, 500);
	glutInitWindowPosition(100, 100);
	glutCreateWindow("Cube  create by cxl");
	init();
	glutReshapeFunc(reshape);
	glutDisplayFunc(display);
	glutMouseFunc(mouse);
	glutKeyboardFunc(key);
	glutMainLoop();
}
