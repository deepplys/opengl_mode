#include <gl/glut.h>
#include <cstdio>
#include <cstdlib>
#include <cmath>
const double pi = acos(-1);
typedef struct materialStruct
{
	GLfloat ambient[4];//环境反射
	GLfloat diffuse[4];//漫反射
	GLfloat specular[4];//镜面反射
	GLfloat shininess;//辉度系数
}materialStruct;
materialStruct brassMaterials =
{
	{0.33,0.22,0.03,1.0},
	{0.78,0.57,0.11,1.0},
	{0.99,0.91,0.81,1.0},
	27.8
};
materialStruct whiteShinyMaterials =
{
	{1.0,1.0,1.0,1.0},
	{1.0,1.0,1.0,1.0},
	{1.0,1.0,1.0,1.0},
	100.0
};
typedef struct lightingStruct
{
	GLfloat ambient[4];//环境光
	GLfloat diffuse[4];//漫反光
	GLfloat specular[4];//镜面光
}lightingStruct;
lightingStruct whiteLighting =
{
	{0,0,0,1},{1,1,1,1},{1,1,1,1}
};
void init(void)
{
	glClearColor(0.0, 0.0, 0.0, 0.0);
	glClearDepth(1);
	glShadeModel(GL_SMOOTH);
	GLfloat _ambient[] = { 0.2,0,0,1.0 };
	GLfloat _diffuse[] = { 0,1.0,0.0,1.0 };
	GLfloat _specular[] = { 0,0,1.0,1.0 };
	GLfloat _position[] = { 60,60,60,0 }; 
	glLightfv(GL_LIGHT0, GL_AMBIENT, whiteLighting.ambient);
	glLightfv(GL_LIGHT0, GL_DIFFUSE, whiteLighting.diffuse);
	glLightfv(GL_LIGHT0, GL_SPECULAR, whiteLighting.specular);
	glLightfv(GL_LIGHT0, GL_POSITION, _position);
	glMaterialfv(GL_FRONT_AND_BACK, GL_AMBIENT, whiteShinyMaterials.ambient);
	glMaterialfv(GL_FRONT_AND_BACK, GL_DIFFUSE, whiteShinyMaterials.diffuse);
	glMaterialfv(GL_FRONT_AND_BACK, GL_SPECULAR, whiteShinyMaterials.specular);
	glMaterialfv(GL_FRONT_AND_BACK, GL_SHININESS, &whiteShinyMaterials.shininess);
	glEnable(GL_TEXTURE_2D);
	glEnable(GL_LIGHTING);
	glEnable(GL_LIGHT0);
	glEnable(GL_DEPTH_TEST);
	//glLightModeli(GL_LIGHT_MODEL_TWO_SIDE, GL_TRUE);
	//glHint(GL_PERSPECTIVE_CORRECTION_HINT, GL_NICEST);
}
void reshape(int w, int h)//保持长方体长宽高比例不变
{
	glViewport(0, 0, (GLsizei)w, (GLsizei)h);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	if (w <= h)
	{
		glOrtho(-60.0, 60.0, -60.0 * (GLfloat)h / (GLfloat)w, 60.0 * (GLfloat)h / (GLfloat)w, -60.0, 60.0);
	}
	else
	{
		glOrtho(-60.0 * (GLfloat)w / (GLfloat)h, 60.0 * (GLfloat)w / (GLfloat)h, -60.0, 60.0, -60.0, 60.0);
	}
	glMatrixMode(GL_MODELVIEW);
}
double temp = 0;
void disply()
{
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
	glLoadIdentity();
	//上表面
	temp += 5;
	if (temp > 360)
	{
		temp -= 360;
	}
	glRotated(temp, 0, 1, 0);
	gluLookAt(-10,-10, -10, 0, 0, 0, 1, 0, 0);
	double r = 10;
	double r1 = 5;
	glNormal3f(0, 0, 1);
	glBegin(GL_POLYGON);
	glVertex3f(20, 25, 25);
	glVertex3f(20, 20, 25);
	for (double i = pi / 4; i >= -pi / 4; i -= pi / 360)
	{
		glVertex3f(r * sin(i), r * cos(i), 25);
	}
	glVertex3f(-20, 20, 25);
	glVertex3f(-20, 25, 25);
	glEnd();

	glNormal3f(0, 0, 1);
	glBegin(GL_POLYGON);
	glVertex3f(20, -25, 25);
	glVertex3f(20, -20, 25);
	for (double i = pi*3 / 4; i <= pi*5 / 4; i += pi / 360)
	{
		glVertex3f(r * sin(i), r * cos(i), 25);
	}
	glVertex3f(-20, -20, 25);
	glVertex3f(-20, -25, 25);
	glEnd();

	glNormal3f(0, 0, 1);
	glBegin(GL_POLYGON);
	glVertex3f(25, 20, 25);
	glVertex3f(20, 20, 25);
	for (double i = pi / 4; i <= pi*3 / 4; i += pi / 360)
	{
		glVertex3f(r * sin(i), r * cos(i), 25);
	}
	glVertex3f(20, -20, 25);
	glVertex3f(25, -20, 25);
	glEnd();

	glNormal3f(0, 0, 1);
	glBegin(GL_POLYGON);
	glVertex3f(-25, 20, 25);
	glVertex3f(-20, 20, 25);
	for (double i = -pi / 4; i >= -pi * 3 / 4; i -= pi / 360)
	{
		glVertex3f(r * sin(i), r * cos(i), 25);
	}
	glVertex3f(-20, -20, 25);
	glVertex3f(-25, -20, 25);
	glEnd();
	
	glNormal3f(0, 0, 1);
	glBegin(GL_POLYGON);
	glVertex3f(-20, -20, 25);
	for (double i = -pi; i <= -pi / 2; i += pi / 360)
	{
		glVertex3f(r1 * sin(i)-20, r1 * cos(i)-20, 25);
	}
	glEnd();

	glNormal3f(0, 0, 1);
	glBegin(GL_POLYGON);
	glVertex3f(-20, 20, 25);
	for (double i = -pi/2; i <=0; i += pi / 360)
	{
		glVertex3f(r1 * sin(i)-20, r1 * cos(i)+20, 25);
	}
	glEnd();

	glNormal3f(0, 0, 1);
	glBegin(GL_POLYGON);
	glVertex3f(20, 20, 25);
	for (double i = 0; i <= pi / 2; i += pi / 360)
	{
		glVertex3f(r1 * sin(i)+20, r1 * cos(i)+20, 25);
	}
	glEnd();

	glNormal3f(0, 0, 1);
	glBegin(GL_POLYGON);
	glVertex3f(20, -20, 25);
	for (double i = pi/2; i <= pi ; i += pi / 360)
	{
		glVertex3f(r1 * sin(i) + 20, r1 * cos(i) - 20, 25);
	}
	glEnd();
	//glutSwapBuffers();


	//下表面
	glNormal3f(0, 0, -1);
	glBegin(GL_POLYGON);
	glVertex3f(20, 25, -25);
	glVertex3f(20, 20, -25);
	for (double i = pi / 4; i >= -pi / 4; i -= pi / 360)
	{
		glVertex3f(r * sin(i), r * cos(i), -25);
	}
	glVertex3f(-20, 20, -25);
	glVertex3f(-20, 25, -25);
	glEnd();

	glNormal3f(0, 0, -1);
	glBegin(GL_POLYGON);
	glVertex3f(20, -25, -25);
	glVertex3f(20, -20, -25);
	for (double i = pi * 3 / 4; i <= pi * 5 / 4; i += pi / 360)
	{
		glVertex3f(r * sin(i), r * cos(i), -25);
	}
	glVertex3f(-20, -20, -25);
	glVertex3f(-20, -25, -25);
	glEnd();

	glNormal3f(0, 0, -1);
	glBegin(GL_POLYGON);
	glVertex3f(25, 20, -25);
	glVertex3f(20, 20, -25);
	for (double i = pi / 4; i <= pi * 3 / 4; i += pi / 360)
	{
		glVertex3f(r * sin(i), r * cos(i), -25);
	}
	glVertex3f(20, -20, -25);
	glVertex3f(25, -20, -25);
	glEnd();

	glNormal3f(0, 0, -1);
	glBegin(GL_POLYGON);
	glVertex3f(-25, 20, -25);
	glVertex3f(-20, 20, -25);
	for (double i = -pi / 4; i >= -pi * 3 / 4; i -= pi / 360)
	{
		glVertex3f(r * sin(i), r * cos(i), -25);
	}
	glVertex3f(-20, -20, -25);
	glVertex3f(-25, -20, -25);
	glEnd();

	glNormal3f(0, 0, -1);
	glBegin(GL_POLYGON);
	glVertex3f(-20, -20, -25);
	for (double i = -pi; i <= -pi / 2; i += pi / 360)
	{
		glVertex3f(r1 * sin(i) - 20, r1 * cos(i) - 20, -25);
	}
	glEnd();

	glNormal3f(0, 0, -1);
	glBegin(GL_POLYGON);
	glVertex3f(-20, 20, -25);
	for (double i = -pi / 2; i <= 0; i += pi / 360)
	{
		glVertex3f(r1 * sin(i) - 20, r1 * cos(i) + 20, -25);
	}
	glEnd();

	glNormal3f(0, 0, -1);
	glBegin(GL_POLYGON);
	glVertex3f(20, 20, -25);
	for (double i = 0; i <= pi / 2; i += pi / 360)
	{
		glVertex3f(r1 * sin(i) + 20, r1 * cos(i) + 20, -25);
	}
	glEnd();

	glNormal3f(0, 0, -1);
	glBegin(GL_POLYGON);
	glVertex3f(20, -20, -25);
	for (double i = pi / 2; i <= pi; i += pi / 360)
	{
		glVertex3f(r1 * sin(i) + 20, r1 * cos(i) - 20, -25);
	}
	glEnd();

	/////分界线
	glBegin(GL_QUAD_STRIP);
	glVertex3f(-20, -20, -25);
	for (double i = -pi; i <= -pi / 2; i += pi / 180)
	{
		glNormal3f(sin(i+pi/360), cos(i+pi/360), 0);
		glVertex3f(r1 * sin(i) - 20, r1 * cos(i) - 20, -25);
		glVertex3f(r1* sin(i) - 20, r1 * cos(i) - 20, 25);
	}
	glEnd();

	glBegin(GL_QUAD_STRIP);
	glVertex3f(-20, 20, -25);
	for (double i = -pi / 2; i <= 0; i += pi / 360)
	{
		glNormal3f(sin(i + pi / 360), cos(i + pi / 360), 0);
		glVertex3f(r1 * sin(i) - 20, r1 * cos(i) + 20, -25);
		glVertex3f(r1* sin(i) - 20, r1 * cos(i) + 20, 25);
	}
	glEnd();

	glBegin(GL_QUAD_STRIP);
	glVertex3f(20, 20, -25);
	for (double i = 0; i <= pi / 2; i += pi / 360)
	{
		glNormal3f(sin(i + pi / 360), cos(i + pi / 360), 0);
		glVertex3f(r1 * sin(i) + 20, r1 * cos(i) + 20, -25);
		glVertex3f(r1* sin(i) + 20, r1 * cos(i) + 20, 25);
	}
	glEnd();

	glBegin(GL_QUAD_STRIP);
	glVertex3f(20, -20, -25);
	for (double i = pi / 2; i <= pi; i += pi / 360)
	{
		glNormal3f(sin(i + pi / 360), cos(i + pi / 360), 0);
		glVertex3f(r1 * sin(i) + 20, r1 * cos(i) - 20, -25);
		glVertex3f(r1* sin(i) + 20, r1 * cos(i) - 20, 25);
	}
	glEnd();

	glNormal3f(1, 0, 0);
	glBegin(GL_POLYGON);
	glVertex3f(25, 20, 25);
	glVertex3f(25, -20, 25);
	glVertex3f(25, -20, -25);
	glVertex3f(25, 20, -25);
	glEnd();

	glNormal3f(0, 1, 0);
	glBegin(GL_POLYGON);
	glVertex3f(20, 25, 25);
	glVertex3f(-20, 25, 25);
	glVertex3f(-20, 25, -25);
	glVertex3f(20, 25, -25);
	glEnd();

	glNormal3f(-1, 0, 0);
	glBegin(GL_POLYGON);
	glVertex3f(-25, 20, 25);
	glVertex3f(-25, -20, 25);
	glVertex3f(-25, -20, -25);
	glVertex3f(-25, 20, -25);
	glEnd();

	glNormal3f(0, -1, 0);
	glBegin(GL_POLYGON);
	glVertex3f(20, -25, 25);
	glVertex3f(-20, -25, 25);
	glVertex3f(-20, -25, -25);
	glVertex3f(20, -25, -25);
	glEnd();

	glBegin(GL_QUAD_STRIP);
	for (double i = 0; i <= pi * 2; i+=pi/180)
	{
		glNormal3f(-sin(i), -cos(i), 0);
		glVertex3f(r* sin(i), r* cos(i), 25);
		glVertex3f(r* sin(i), r* cos(i), -25);
	}
	glEnd();
	glFlush();
}
int main(int argc, char** argv)
{
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB | GLUT_DEPTH);
	glutInitWindowSize(500, 500);
	glutInitWindowPosition(100, 100);
	glutCreateWindow("Sphere");
	init(); 
	glutReshapeFunc(reshape);
	glutDisplayFunc(disply);
	glutMainLoop();
	return 0;
}
